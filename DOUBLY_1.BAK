#include<stdio.h>
#include<stdlib.h>
struct node
{
    struct node *prev;
    struct node *next;
    int data;
};
struct node *head;
void insertion_beginning();
void insertion_last();
void insertion_specified();
void deletion_beginning();
void deletion_last();
void deletion_specified();
void display();
void search();
void main ()
{
     int choice =0,ch=0,ch1=0;
     clrscr();
    while(choice != 9)
    {
	printf("\n*********Main Menu*********\n");
	printf("\nChoose one option from the following list ...\n");
	printf("\n===============================================\n");
	printf("1.Insert\n2.Delete\n3.display\n4.exit\n");
       //printf("\n1.Insert in begining\n2.Insert at last\n3.Insert at any random location\n4.Delete from Beginning\nDelete from last\n6.Delete the node after the given data\n7.Search\n8.Show\n9.Exit\n");
	printf("\nEnter your choice?\n");
	scanf("\n%d",&choice);
	switch(choice)
	{
	    case 1:  printf("\n1.Insert in begining\n2.Insert at last\n3.Insert at any random location\n");
		     printf("\nEnter your choice?\n");
		     scanf("%d",&ch);
		     switch(ch)
		     {
		      case 1:
			     insertion_beginning();
			     break;
		      case 2:
			     insertion_last();
			     break;
		      case 3:
			    insertion_specified();
			    break;
		      }
		      break;
	    case 2:    printf("\n1.Delete from Beginning\n2.Delete from last\n3.Delete the node after the given data\n");
			printf("\nEnter your choice?\n");
			scanf("%d",&ch1);
			switch(ch1)
			{
			  case 1:
				 deletion_beginning();
				 break;
			 case 2:
				  deletion_last();
				   break;
			  case 3:
				deletion_specified();
				  break;
			 }
			 break;
	    case 3:
		    display();
		    break;
	    case 4:
		    exit(0);
		    break;
	    default:
		    printf("Please enter valid choice..");
	}
    }
}
void insertion_beginning()
{
   struct node *ptr;
   int item;
   ptr = (struct node *)malloc(sizeof(struct node));
   if(ptr == NULL)
   {
       printf("\nOVERFLOW");
   }
   else
   {
    printf("\nEnter Item value");
    scanf("%d",&item);

   if(head==NULL)
   {
       ptr->next = NULL;
       ptr->prev=NULL;
       ptr->data=item;
       head=ptr;
   }
   else
   {
       ptr->data=item;
       ptr->prev=NULL;
       ptr->next=head;
       head->prev=ptr;
       head=ptr;
   }
   printf("\nNode inserted\n");
}

}
void insertion_last()
{
   struct node *ptr,*temp;
   int item;
   ptr = (struct node *) malloc(sizeof(struct node));
   if(ptr == NULL)
   {
       printf("\nOVERFLOW");
   }
   else
   {
       printf("\nEnter value");
       scanf("%d",&item);
	ptr->data=item;
       if(head == NULL)
       {
	   ptr->next = NULL;
	   ptr->prev = NULL;
	   head = ptr;
       }
       else
       {
	  temp = head;
	  while(temp->next!=NULL)
	  {
	      temp = temp->next;
	  }
	  temp->next = ptr;
	  ptr ->prev=temp;
	  ptr->next = NULL;
	  }

       }
     printf("\nnode inserted\n");
    }
void insertion_specified()
{
   struct node *ptr,*temp;
   int item,loc,i;
   ptr = (struct node *)malloc(sizeof(struct node));
   if(ptr == NULL)
   {
       printf("\n OVERFLOW");
   }
   else
   {
       temp=head;
       printf("Enter the location");
       scanf("%d",&loc);
       for(i=0;i<loc;i++)
       {
	   temp = temp->next;
	   if(temp == NULL)
	   {
	       printf("\n There are less than %d elements", loc);
	       return;
	   }
       }
       printf("Enter value");
       scanf("%d",&item);
       ptr->data = item;
       ptr->next = temp->next;
       ptr -> prev = temp;
       temp->next = ptr;
       temp->next->prev=ptr;
       printf("\nnode inserted\n");
   }
}
void deletion_beginning()
{
    struct node *ptr;
    if(head == NULL)
    {
	printf("\n UNDERFLOW");
    }
    else if(head->next == NULL)
    {
	head = NULL;
	free(head);
	printf("\nnode deleted\n");
	printf("deleted node is %d\n",head->data);
    }
    else
    {
	ptr = head;
	head = head -> next;
	head -> prev = NULL;
	free(ptr);
	printf("\nnode deleted\n");
	printf("deleted node is %d\n",ptr->data);
    }

}
void deletion_last()
{
    struct node *ptr;
    if(head == NULL)
    {
	printf("\n UNDERFLOW");
    }
    else if(head->next == NULL)
    {
	head = NULL;
	free(head);
	printf("\nnode deleted\n");
		printf("deleted node is %d\n",head->data);
    }
    else
    {
	ptr = head;
	if(ptr->next != NULL)
	{
	    ptr = ptr -> next;
	}
	ptr -> prev -> next = NULL;
	free(ptr);
	printf("\nnode deleted\n");
		printf("deleted node is %d\n",ptr->data);
    }
}
void deletion_specified()
{
    struct node *ptr, *temp;
    int val;
    printf("\n Enter the data after which the node is to be deleted : ");
    scanf("%d", &val);
    ptr = head;
    while(ptr -> data != val)
    ptr = ptr -> next;
    if(ptr -> next == NULL)
    {
	printf("\nCan't delete\n");
    }
    else if(ptr -> next -> next == NULL)
    {
	ptr ->next = NULL;
    }
    else
    {
	temp = ptr -> next;
	ptr -> next = temp -> next;
	temp -> next -> prev = ptr;
	free(temp);
	printf("\nnode deleted\n");
	printf("deleted node is %d\n",temp->data);
    }

}
void display()
{
    struct node *ptr;
    printf("\n printing values...\n");
    ptr = head;
    while(ptr != NULL)
    {
	printf("%d\n",ptr->data);
	ptr=ptr->next;
    }
}
